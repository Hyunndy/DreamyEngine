////////////////////////////////////////////////////////////////////////////////
// Filename: Pointlight.ps
////////////////////////////////////////////////////////////////////////////////

#define NUM_LIGHTS 1

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;



cbuffer LightColorBuffer
{
	float4 diffuseColor[NUM_LIGHTS];
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 lightPos1 : TEXCOORD1; 
	//float3 lightPos2 : TEXCOORD2;
	//float3 lightPos3 : TEXCOORD3; 
	//float3 lightPos4 : TEXCOORD4;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PointLightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float lightIntensity1;
	//lightIntensity2, lightIntensity3, lightIntensity4;
	float4 color,color1;
	// color2, color3, color4;

	// 빛의 강도는 노말벡터와 빛의 위치를 사용하여 계산된다.
	lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
	//lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
	//lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
	//lightIntensity4 = saturate(dot(input.normal, input.lightPos4));			

	// 색은 빛의 diffuseColor와 빛의 강도를 곱한 값으로 계산된다.
	color1 = diffuseColor[0] * lightIntensity1;
	//color2 = diffuseColor[1] *lightIntensity2;
	//color3 = diffuseColor[2] *lightIntensity3;
	//color4 = diffuseColor[3] *lightIntensity4;			


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// color = saturate(color1 + color2 + color3 + color4) * textureColor;
	
	color = saturate(color1) * textureColor;

    return color;
}

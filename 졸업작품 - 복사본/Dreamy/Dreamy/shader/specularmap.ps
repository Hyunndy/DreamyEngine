////////////////////////////////////////////////////////////////////////////////
// Filename: specularmap.ps
////////////////////////////////////////////////////////////////////////////////



/////////////
// GLOBALS //
/////////////

//색상 텍스쳐, 노말 맵 텍스처, 반사맵 텍스처 3개
Texture2D shaderTextures[3];

SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////

// 반사광을 표현해야 하므로 반사광의 색상과 강도도 받아야한다.
cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float4 specularColor;
    float specularPower;
    float3 lightDirection;
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////

float4 SpecMapPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
    float4 bumpMap;
    float3 bumpNormal;
    float3 lightDir;
    float lightIntensity;
    float4 color;

    float4 specularIntensity;
    float3 reflection;
    float4 specular;

    textureColor = shaderTextures[0].Sample(SampleType, input.tex);

    //노말맵에 저장되어있던 법선 벡터를 뽑아낸다.
    bumpMap = shaderTextures[1].Sample(SampleType, input.tex);

    //압축되어있던 픽셀의 텍스처 좌표를 [-1,1] 단위벡터로 만들어준다.
    bumpMap = (bumpMap * 2.0f) - 1.0f;

    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);


    bumpNormal = normalize(bumpNormal);

    lightDir = -lightDirection;

    //노말 맵의 법선 벡터의 값에 기초해서 이 픽셀의 빛의 강도를 계산한다.
    lightIntensity = saturate(dot(bumpNormal, lightDir));

	color = ambientColor;

    // 빛의 색상과 빛의 강도로 최종 빛 색상을 결정한다.
    color += saturate(diffuseColor * lightIntensity);

    // 최종 빛 색상과 텍스처 색상을 섞어서 픽셀의 최종 색상을 정한다.
    color = color * textureColor;

    // 빛의 세기가 0보다 클 때 반사광을 계산한다.
    if(lightIntensity>0.0f);
    {
        // 이 픽셀에서의 반사 광도를 알아내기 위해 반사 맵에서 그 값을 샘플링한다.
        // 각 텍스처의 픽셀 마다의 알파값을 해당 픽셀에서의 빛의 세기로 활용하는 참조 테이블로서 사용한다.
        specularIntensity = shaderTextures[2].Sample(SampleType, input.tex);

        // 반사 계산에서는 입력된 법선 대신 범프맵 계산이 끝난 법선을 사용한다.
        // 여기서 2를 왜 곱하지?ㅡㅡ 씨발...
        reflection = normalize(2*lightIntensity * bumpNormal - lightDir);

        //반사광의 양을 반사광파워, 방향, 반사 벡터를 기초로 알아낸다.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

        //반사광이 어느 정도의 세기를 갖는지 알았으니 여기에 반사 강도를 곱해 최종값을 뽑아낸다.
        specular = specular * specularIntensity;

        color = saturate(color + specular);

    }

	return color;
}

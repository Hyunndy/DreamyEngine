////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////

//텍스처 그 자체
//텍스처 자원으로서 모델에 텍스처를 그릴 때 사용된다.
Texture2D shaderTexture;

//샘플러 상태(sampler state)는 도형에 셰이딩이 이루어질 때 어떻게 텍스처의
//픽셀이 씌여지는지 수정할 수 있게한다. (필터임 필터)
//이 샘플러 상태를 Shader클래스에 만들고 연결하여 픽셀 셰이더에서 이를 이용할 수 있게 한다.
SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////

// font.vs는 texture.vs와 같으나 pixel은 다르다!
// 왜냐면 픽셀 셰이더는 색깔을 바꿔주기때문에! 컬러를 정할 수 있는 새로운 상수 버퍼를 만든다!
cbuffer PixelBuffer
{
	float4 pixelColor;
}


//정점 셰이더와 픽셀셰이더에서 텍스처 좌표를 나타내기 위해 TEXCOORD0이라는걸 사용한다.
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////



// 출력할 픽셀에 해당하는 글꼴상의 텍스처를 가져온다.
// 만약 검은색이면 배경색으로 취급한다. 해당 픽셀의 알파값을 0으로 하여 실제 글자 외에는 배경이 비춰질 수 있게 해야한다.
float4 FontPixelShader(PixelInputType input) : SV_TARGET
{
	float4 Color;


    // 도형의 표면 UV좌표 위치에 들어갈 픽셀값을 결정하고 반환하기 위해 두 변수를 사용한다.
    Color = shaderTexture.Sample(SampleType, input.tex);

	// 텍스처의 컬러가 블랙이라면 이 픽셀을 투명하게..!
	if(Color.r == 0.0f)
	{
		Color.a = 0.0f;
	}
	
	else
	{
		Color.a = 1.0f;
		Color = Color*pixelColor;
	}

    return Color;
}
